#!/bin/bash
#
#
# Copyright HP 2013
# All rights reserved
#
### vertica_db - startup/shutdown for the Vertica Analytic Database 
#
#   The Vertica Analytic Database is a distributed column-oriented database.
#
#   Notes:
#       This is rather a thin implementation because starting up a single
#       node of a clustered database is complex.  So this script simply
#       delivers a control command to the Vertica Administration Tools, which
#       are responsible for implementing the command and returning the result.
#
# RedHat metadata format:
#   chkconfig: 345 99 10
#   description: Startup/shutdown script for the Vertica Analytic Database
#
# LSB/SUSE format:
### BEGIN INIT INFO
# Provides:       vertica_db
# Required-Start: vertica_agent verticad $network ntpd
# Should-Start:
# Required-Stop:
# Should-Stop:
# Default-Start:  3 5
# Default-Stop:   0 1 6
# Description:    Startup/shutdown script for the Vertica Analytic Database
### END INIT INFO

# change this according to the DB that needs to be up.
DBNAME=Proj_G 
PASS=Proj_G

#
# Determine our OS
#

[ -f /etc/redhat-release ] && OS=redhat
[ -f /etc/SuSE-release ] && OS=suse
[ -f /etc/debian_version ] && OS=debian

#
# Source function library.
#
case $OS in
    redhat)
        . /etc/rc.d/init.d/functions
        ;;
    suse)
        . /etc/rc.status
        ;;
    debian)
        . /lib/lsb/init-functions
        ;;
    *)
        echo Unsupported OS
        exit 1
        ;;
esac


#
# OS-specific helper functions
#
# error(msg) prints the error message then exits
#
function error {
    if [ "$mode" == "status" ]; then
        echo $1
    else
        echo $1
        case $OS in
            redhat)
                echo_failure
                ;;
            suse)
                echo $rc_failed
                ;;
            debian)
                log_failure_msg
                ;;
        esac
    fi
    exit 1
}

# success() exits appropriately
#
function success {
    if [ "$mode" == "status" ]; then
        echo $1
    else
        echo $1
        case $OS in
            redhat)
                echo_success
                ;;
            suse)
                echo -e "$rc_running"
                ;;
            debian)
                log_success_msg
                ;;
        esac
    fi
    exit 0
}

# Find out where vertica is installed, use that path

if [ "$OS" == "redhat" -o "$OS" == "suse" ]; then
    vertica_prefix=`rpm -q --whatprovides vertica-base --qf %{INSTPREFIXES}`
    if [ $? -ne 0 ]; then
        # No RPM installed
        error "No RPM: $vertica_prefix"
    fi
elif [ "$OS" ==  "debian" ]; then
    query_out=`dpkg-query -S /opt/vertica/config | awk -F": " '{print $2}'`
    if [ $? -ne 0 -o -z "$query_out" ]; then
        # No package installed
        error "No package"
    fi
    vertica_prefix=`expr "$query_out" : "\(.*\)/config"`
else
    error "Unknown OS = $OS"
fi



if [ "$OS" == "redhat" ]; then
    . /etc/sysconfig/network
    if [ ${NETWORKING} = "no" ]; then
        error
    fi
fi

# Check EULA acceptance
eula_acceptance="${vertica_prefix}/config/d5415f948449e9d4c421b568f2411140.dat"

if [ -f ${eula_acceptance} ]; then
    # Good to go, execute the command as each DB admin
    #user that has databases defined
    cd ${vertica_prefix}/config/users
else
    error "EULA not  yet accepted."
fi;

status() {
    echo -n $"checking status of: ${DBNAME}: "
	
	succeedDB=
	for user in *; do
		# echo "User: ${user}"
		if [ -f ${vertica_prefix}/config/users/${user}/installed.dat ]; then
			# run command as the DBA user
			# output goes to /dev/null for this script, but most stuff is in admin tools log
			su -l ${user} -c "${vertica_prefix}/bin/adminTools -t db_status -s UP | grep ${DBNAME}" > /dev/null
			if [ $? -eq 0 ]; then
				succeedDB="$succeedDB$user "
			fi
		fi
	done;
    		

    # check vertica db stopped
    if [ "$succeedDB" == "" ];then
        	error "db down"
	else
		success "up"
	fi

}


stop() {
    echo -n $"Stopping vertica db ${DBNAME}: "
	succeedDB=
	for user in *; do
		# echo "User: ${user}"
		if [ -f ${vertica_prefix}/config/users/${user}/installed.dat ]; then
			# run command as the DBA user
			# output goes to /dev/null for this script, but most stuff is in admin tools log
			su -l ${user} -c "${vertica_prefix}/bin/adminTools -t stop_db -d ${DBNAME} -p ${PASS}" > /dev/null
			if [ $? -eq 0 ]; then
				succeedDB="$succeedDB$user "
			fi
		fi
	done;

	# For status, we return success iff the command succeeded for some user

	if [ "$succeedDB" == "" ]; then
		error "$1 not OK"
	else
		success "$1 OK for users: $succeedDB"
	fi
}



start(){
	succeedDB=
	for user in *; do
		# echo "User: ${user}"
		if [ -f ${vertica_prefix}/config/users/${user}/installed.dat ]; then
			# run command as the DBA user
			# output goes to /dev/null for this script, but most stuff is in admin tools log
			su -l ${user} -c "${vertica_prefix}/bin/adminTools -t start_db -d ${DBNAME}" > /dev/null
			if [ $? -eq 0 ]; then
				succeedDB="$succeedDB$user "
			fi
		fi
	done;

	# For status, we return success iff the command succeeded for some user

	if [ "$succeedDB" == "" ]; then
		error "$1 not OK"
	else
		success "$1 OK for users: $succeedDB"
	fi
}



# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
	mode=status
	status
        ;;
    restart)
        stop
        sleep 3
        start
        ;;    
    *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac





